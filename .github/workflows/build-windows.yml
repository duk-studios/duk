# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Windows Build

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - name: Authenticate private registries
      shell: bash
      run: git config --global credential.https://github.com/duk-studios/vcpkg-registry.helper '!f() { echo username=unused; echo password=${{ secrets.DUK_VCPKG_REGISTRY_PAT }}; }; f'

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: { committish: 8d3649ba34aab36914ddd897958599aa0a91b08e }

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset visual-studio

    - name: Build
      run: cmake --build --preset visual-studio-debug
